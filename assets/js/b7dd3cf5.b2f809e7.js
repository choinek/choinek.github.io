"use strict";(self.webpackChunkchoinek=self.webpackChunkchoinek||[]).push([[1179],{9831:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"adrians-tutorials/git/rebase","title":"Git Rebase \u2013 Practical Guide","description":"Guide on how to using git rebase with examples and mermaid diagrams.","source":"@site/docs/adrians-tutorials/git/rebase.md","sourceDirName":"adrians-tutorials/git","slug":"/adrians-tutorials/git/rebase","permalink":"/docs/adrians-tutorials/git/rebase","draft":false,"unlisted":false,"editUrl":"https://github.com/choinek/choinek.github.io/tree/main/docs/adrians-tutorials/git/rebase.md","tags":[{"inline":true,"label":"Docusaurus","permalink":"/docs/tags/docusaurus"},{"inline":true,"label":"Git","permalink":"/docs/tags/git"},{"inline":true,"label":"Rebase","permalink":"/docs/tags/rebase"}],"version":"current","frontMatter":{"title":"Git Rebase \u2013 Practical Guide","sidebar_label":"Git Rebase","tags":["Docusaurus","Git","Rebase"],"description":"Guide on how to using git rebase with examples and mermaid diagrams."},"sidebar":"tutorialSidebar","previous":{"title":"Adrian\'s Tutorials","permalink":"/docs/category/adrians-tutorials"},"next":{"title":"Cookie Empire: Sweet Oblivion","permalink":"/docs/coookie-empire-sweet-oblivion"}}');var r=i(4848),t=i(8453);const a={title:"Git Rebase \u2013 Practical Guide",sidebar_label:"Git Rebase",tags:["Docusaurus","Git","Rebase"],description:"Guide on how to using git rebase with examples and mermaid diagrams."},l=void 0,o={},c=[{value:"What is <code>git rebase</code>?",id:"what-is-git-rebase",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Rebase feature-branch onto main",id:"1-rebase-feature-branch-onto-main",level:3},{value:"2. Interactive rebase (squashing commits)",id:"2-interactive-rebase-squashing-commits",level:3},{value:"3. Rebase --onto (changing branch base)",id:"3-rebase---onto-changing-branch-base",level:3},{value:"4. Git pull --rebase (updating local branch)",id:"4-git-pull---rebase-updating-local-branch",level:3},{value:"Summary",id:"summary",level:2},{value:"When to use <code>git rebase</code>?",id:"when-to-use-git-rebase",level:3},{value:"When <strong>not to use</strong> <code>git rebase</code>?",id:"when-not-to-use-git-rebase",level:3},{value:"Conclusion",id:"conclusion",level:3}];function d(e){const s={code:"code",h2:"h2",h3:"h3",hr:"hr",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h2,{id:"what-is-git-rebase",children:["What is ",(0,r.jsx)(s.code,{children:"git rebase"}),"?"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"git rebase"})," allows rewriting commit history, eliminating unnecessary merge commits and creating a clean, linear history."]}),"\n",(0,r.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(s.h3,{id:"1-rebase-feature-branch-onto-main",children:"1. Rebase feature-branch onto main"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"git rebase main"})," on feature-branch:"]}),"\n",(0,r.jsxs)("div",{class:"row",children:[(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Before rebase:"})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B"]\n  C["Commit C (main)"]\n  D["Commit D (feature)"]\n  E["Commit E (feature)"]\n  F["Commit F (feature)"]\n  A --\x3e B\n  B --\x3e C\n  C --\x3e D\n  D --\x3e E\n  E --\x3e F\n  class A,B,C main;\n  class D,E,F feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]}),(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"After rebase:"})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B"]\n  C["Commit C (main)"]\n  Dp["Commit D (rebased)"]\n  Ep["Commit E (rebased)"]\n  Fp["Commit F (rebased)"]\n  A --\x3e B\n  B --\x3e C\n  C --\x3e Dp\n  Dp --\x3e Ep\n  Ep --\x3e Fp\n  class A,B,C main;\n  class Dp,Ep,Fp feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]})]}),"\n",(0,r.jsx)(s.h3,{id:"2-interactive-rebase-squashing-commits",children:"2. Interactive rebase (squashing commits)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"git rebase -i"})," with squashing:"]}),"\n",(0,r.jsxs)("div",{class:"row",children:[(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Before rebase:"})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B"]\n  C["Commit C (main)"]\n  D["Commit D (feature)"]\n  E["Commit E (feature)"]\n  F["Commit F (feature)"]\n  A --\x3e B\n  B --\x3e C\n  C --\x3e D\n  D --\x3e E\n  E --\x3e F\n  class A,B,C main;\n  class D,E,F feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]}),(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"After rebase:"})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B"]\n  C["Commit C (main)"]\n  S["Squashed Commit (feature)"]\n  A --\x3e B\n  B --\x3e C\n  C --\x3e S\n  class A,B,C main;\n  class S feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]})]}),"\n",(0,r.jsx)(s.h3,{id:"3-rebase---onto-changing-branch-base",children:"3. Rebase --onto (changing branch base)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"git rebase --onto new-base old-base feature-branch"}),":"]}),"\n",(0,r.jsxs)("div",{class:"row",children:[(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Before rebase:"})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B (old-base)"]\n  C["Commit C"]\n  D["Commit D (feature)"]\n  E["Commit E (feature)"]\n  F["Commit F (feature)"]\n  X["Commit X (new-base)"]\n  Y["Commit Y"]\n  A --\x3e B\n  B --\x3e C\n  B --- D\n  D --\x3e E\n  E --\x3e F\n  C --\x3e X\n  X --\x3e Y\n  class A,B,C,X,Y main;\n  class D,E,F feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]}),(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"After rebase:"})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B (old-base)"]\n  C["Commit C"]\n  X["Commit X (new-base)"]\n  Y["Commit Y"]\n  Dp["Commit D (rebased)"]\n  Ep["Commit E (rebased)"]\n  Fp["Commit F (rebased)"]\n  A --\x3e B\n  B --\x3e C\n  C --\x3e X\n  X --\x3e Y\n  Y --\x3e Dp\n  Dp --\x3e Ep\n  Ep --\x3e Fp\n  class A,B,C,X,Y main;\n  class Dp,Ep,Fp feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]})]}),"\n",(0,r.jsx)(s.h3,{id:"4-git-pull---rebase-updating-local-branch",children:"4. Git pull --rebase (updating local branch)"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"git pull --rebase origin main"}),":"]}),"\n",(0,r.jsxs)("div",{class:"row",children:[(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Before ",(0,r.jsx)(s.code,{children:"git pull --rebase"}),":"]})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B"]\n  C["Commit C (origin/main)"]\n  D["Commit D (local)"]\n  X["Commit X (local)"]\n  Y["Commit Y (local)"]\n  A --\x3e B\n  B --\x3e C\n  C --\x3e D\n  D --\x3e X\n  X --\x3e Y\n  class A,B,C main;\n  class D,X,Y feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]}),(0,r.jsxs)("div",{class:"col col--6",children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"After rebase:"})}),(0,r.jsx)(s.mermaid,{value:'flowchart TD\n  A["Commit A"]\n  B["Commit B"]\n  C["Commit C (origin/main)"]\n  Xp["Commit X (rebased)"]\n  Yp["Commit Y (rebased)"]\n  A --\x3e B\n  B --\x3e C\n  C --\x3e Xp\n  Xp --\x3e Yp\n  class A,B,C main;\n  class Xp,Yp feature;\n  classDef main color:#3b3b3b,fill:#C6E5FF,stroke:#333,stroke-width:1px;\n  classDef feature color:#3b3b3b,fill:#FFEEAD,stroke:#333,stroke-width:1px;'})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(s.h3,{id:"when-to-use-git-rebase",children:["When to use ",(0,r.jsx)(s.code,{children:"git rebase"}),"?"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{}),(0,r.jsx)(s.th,{})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"\u2705"}),(0,r.jsxs)(s.td,{children:[(0,r.jsxs)(s.strong,{children:["Before merging into ",(0,r.jsx)(s.code,{children:"main"})]})," - to avoid unnecessary merge commits."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"\u2705"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"Before code review"}),", to clean up commits (",(0,r.jsx)(s.code,{children:"git rebase -i"}),")."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"\u2705"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"To rebase a branch onto a different base"})," (",(0,r.jsx)(s.code,{children:"git rebase --onto"}),")."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"\u2705"}),(0,r.jsxs)(s.td,{children:[(0,r.jsxs)(s.strong,{children:["During ",(0,r.jsx)(s.code,{children:"git pull"})]}),", to avoid merge commits (",(0,r.jsx)(s.code,{children:"git pull --rebase"}),")."]})]})]})]}),"\n",(0,r.jsxs)(s.h3,{id:"when-not-to-use-git-rebase",children:["When ",(0,r.jsx)(s.strong,{children:"not to use"})," ",(0,r.jsx)(s.code,{children:"git rebase"}),"?"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{}),(0,r.jsx)(s.th,{})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"\u274c"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"On a shared branch"})," \u2013 it rewrites commit history, which can cause conflicts."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"\u274c"}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"If commits were already pushed"})," \u2013 requires ",(0,r.jsx)(s.code,{children:"git push --force"}),", which may overwrite others' changes."]})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"git rebase"})," helps keep history clean but should be used carefully. Use it when you want to avoid unnecessary merge commits and maintain a tidy repository."]})]})}function m(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);